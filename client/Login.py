# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Administrator\Downloads\Login_PyQt5-master\Login.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

import qdarkstyle
import yaml
from PyQt5.QtWidgets import QMainWindow, QMessageBox

from PyQt5 import QtCore, QtGui, QtWidgets

from ui.loginWindowUI import Login_Window_UI
from utils.MyThread import RequestThread
from css.Login_css import StyleLineEditError, StyleLineEditOk, StylePopupError, StylePopupOk
from CadWindow import CadWindow
from registerDialog import Register_Dialog
from utils.SingletionUtils import urlConstants,GlobalDict
from utils.Validitor import FormValidator
import sys
from pyqtgraph.Qt import QtCore, QtWidgets
import css.Login_rc


class Login_Window(Login_Window_UI):
    def __init__(self):
        super(Login_Window, self).__init__()
        self.pushButton_close_popup.clicked.connect(lambda: self.frame_error.hide())

        try:
            f = open(r'.\config.yaml',encoding='utf-8')
            file = yaml.safe_load(f)
            GlobalDict.add_dict(file)
            urlConstants.update_prefix(file['server']["url"])
        except Exception as e:
            print(e)
            QMessageBox.warning(self, "提示", "配置文件读取失败")
            self.close()


        # HIDE ERROR
        self.frame_error.hide()

        # BT LOGIN
        self.pushButton_login.clicked.connect(self.checkFields)

        self.pushButton_register.clicked.connect(self.on_RegisterButton_clicked)


        # 按下回车键登录
        self.userEdit.returnPressed.connect(self.checkFields)
        self.passwordEdit.returnPressed.connect(self.checkFields)


    def checkFields(self):

        textUser = ""
        textPassword = ""

        def showMessage(message):
                self.frame_error.show()
                self.label_error.setText(message)

        # CHECK USER
        if FormValidator.validate_not_empty(self.userEdit.text()) is False:
                textUser = "用户名为空 "
                self.userEdit.setStyleSheet(StyleLineEditError)
        else:
                textUser = ""
                self.userEdit.setStyleSheet(StyleLineEditOk)

        # CHECK PASSWORD
        if FormValidator.validate_not_empty(self.passwordEdit.text()) is False:
                textPassword = " 密码为空"
                self.passwordEdit.setStyleSheet(StyleLineEditError)
        else:
                textPassword = ""
                self.passwordEdit.setStyleSheet(StyleLineEditOk)

        # CHECK FIELDS
        if textUser + textPassword != '':
                text = textUser + textPassword
                showMessage(text)
                self.frame_error.setStyleSheet(StylePopupError)
        else:
                request_dict = {
                   "username": self.userEdit.text(),
                     "password": self.passwordEdit.text()
                }
                url = urlConstants.LOGIN_URL

                self.request_thread = RequestThread("post", url, json=request_dict)
                self.request_thread.finishSignal.connect(self.login_postprocess)
                self.request_thread.start()

    def login_postprocess(self, response):
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
                self.frame_error.show()
                self.label_error.setText("登录成功")
                self.frame_error.setStyleSheet(StylePopupOk)

                self.mainwindow = CadWindow()
                self.mainwindow.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt5'))
                self.mainwindow.show()
                self.close()

            else:
                if "errorMsg" in res:
                    self.frame_error.show()
                    self.label_error.setText(str(res["errorMsg"]))
                    self.frame_error.setStyleSheet(StylePopupError)
                else:
                    self.frame_error.show()

                    self.label_error.setText("请求失败")
                    self.frame_error.setStyleSheet(StylePopupError)

        else:
            self.frame_error.show()
            self.label_error.setText("请求失败")
            self.frame_error.setStyleSheet(StylePopupError)




    def on_RegisterButton_clicked(self):
        self.register_Dialog = Register_Dialog()
        self.register_Dialog.show()


if __name__ == "__main__":




    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_ShareOpenGLContexts)


    app = QtWidgets.QApplication(sys.argv)

    login = Login_Window()
    login.show()
    sys.exit(app.exec_())