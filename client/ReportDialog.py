# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Administrator\Downloads\Login_PyQt5-master\register_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io
import json
import os.path

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QDialog, QFileDialog

from ui.ReportInfoUI import ReportInfoUI
from ui.addPatientWindowUI import AddPatientWindowUI
from ui.addScanUI import AddScanDialogUI
from ui.component.LoadingDialog import LoadingDialog
from ui.registerDialogUI import Register_Dialog_UI
from utils.MyThread import RequestThread, LoadDicomThread, ReportThread
from css.Login_css import StyleRegisterLineEditError, StyleRegisterLineEditOk
from utils.SingletionUtils import urlConstants
from utils.Validitor import FormValidator
import SimpleITK as sitk

class ReportDialog(ReportInfoUI):
    def __init__(self,report_config,patient_data,scan_data,nodule_info,nodule_img,appearance,diagnosis,parent=None):
        super(ReportDialog, self).__init__(parent)
        self.report_config = report_config
        self.patient_data = patient_data
        self.scan_data = scan_data
        self.nodule_info = nodule_info
        self.nodule_img = nodule_img
        self.appearance = appearance
        self.diagnosis = diagnosis

        self.addButton.clicked.connect(self.addList)
        self.changeButton.clicked.connect(self.changeList)
        self.deleteButton.clicked.connect(self.deleteList)
        self.listWidget.itemDoubleClicked.connect(self.changeList)
        self.reportButton.clicked.connect(self.report)


        self.init_data()

    def init_data(self):
        self.titleEdit.setText(self.report_config['title'])
        self.subtitleEdit.setText(self.report_config['subTitle'])
        self.dateTimeEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.appearancePlainTextEdit.setPlainText(self.appearance)
        self.diagnosPlainTextEdit.setPlainText(self.diagnosis)

        if "性别" in self.report_config['info']:
           self.report_config['info']['性别']= "男性" if self.patient_data["gender"] == False else "女性"
        if "年龄" in self.report_config['info']:
            self.report_config['info']['年龄'] = str(self.scan_data["age"])
        if "姓名" in self.report_config['info']:
            self.report_config['info']['姓名'] = self.patient_data["name"]
        if "检查时间" in self.report_config['info']:
            self.report_config['info']['检查时间'] = self.scan_data["time"]

        for key, value in self.report_config['info'].items():
            self.listWidget.addItem(key+":"+value)


        if self.report_config['showInfo'] == False:
            self.patientInfoBox.setChecked(False)
        if self.report_config['showTable'] == False:
            self.noduleTableBox.setChecked(False)
        if self.report_config['showImage'] == False:
            self.noduleImgBox.setChecked(False)
        if self.report_config['showAppearance'] == False:
            self.appearanceBox.setChecked(False)
        if self.report_config['showDiagnosis'] == False:
            self.diagnosisBox.setChecked(False)
        if self.report_config['showFooter'] == False:
            self.footerBox.setChecked(False)


    def addList(self):
        # QInputDialog
        text, ok = QtWidgets.QInputDialog.getText(self, '添加', '请输入添加的信息')
        if ok:
            self.listWidget.addItem(text)

    def changeList(self):
        if self.listWidget.currentItem() is None:
            return None
        text, ok = QtWidgets.QInputDialog.getText(self, '修改', '请输入修改的信息',text=self.listWidget.currentItem().text())
        if ok:
            self.listWidget.currentItem().setText(text)

    def deleteList(self):
        if self.listWidget.currentItem() is None:
            return None
        #询问是否删除
        reply = QtWidgets.QMessageBox.question(self, '删除', '是否删除？', QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.listWidget.takeItem(self.listWidget.currentRow())


    def report(self):

        fname, _filter = QFileDialog.getSaveFileName(self, 'save file', '~/{}'.format(self.patient_data["name"]), "PDF (*.pdf)")
        output_config = {}
        output_config['title'] = self.titleEdit.text()
        output_config['subTitle'] = self.subtitleEdit.text()
        output_config['showInfo'] = self.patientInfoBox.isChecked()
        output_config['showTable'] = self.noduleTableBox.isChecked()
        output_config['showImage'] = self.noduleImgBox.isChecked()
        output_config['showAppearance'] = self.appearanceBox.isChecked()
        output_config['showDiagnosis'] = self.diagnosisBox.isChecked()
        output_config['showFooter'] = self.footerBox.isChecked()

        patient_info = []

        self.fname = fname


        for i in range(self.listWidget.count()):
            patient_info.append(self.listWidget.item(i).text())
        self.reportThread = ReportThread(output_config,fname,self.dateTimeEdit.dateTime().toString("yyyy-MM-dd hh:mm:ss"),patient_info,self.nodule_info,self.nodule_img,self.appearancePlainTextEdit.toPlainText(),self.diagnosPlainTextEdit.toPlainText())
        self.reportThread.finishSignal.connect(self.report_post)
        self.reportThread.start()

    def report_post(self,flag, msg):
        if flag:
            try:
                os.startfile(self.fname)
            except Exception:
                # If startfile not available, show dialog.
                QtWidgets.QMessageBox.information(self, "提示", "导出成功")
            finally:
                self.close()
        else:
            QtWidgets.QMessageBox.information(self, "提示", "导出失败;"+msg)











if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
