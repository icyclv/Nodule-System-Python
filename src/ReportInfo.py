# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Administrator\Downloads\Login_PyQt5-master\register_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io
import json
import os.path

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QDialog, QFileDialog

from ui.ReportInfoUI import ReportInfoUI
from ui.addPatientWindowUI import AddPatientWindowUI
from ui.addScanUI import AddScanDialogUI
from ui.component.LoadingDialog import LoadingDialog
from ui.registerDialogUI import Register_Dialog_UI
from utils.MyThread import RequestThread, LoadDicomThread
from css.Login_css import StyleRegisterLineEditError, StyleRegisterLineEditOk
from utils.SingletionUtils import urlConstants
from utils.Validitor import FormValidator
import SimpleITK as sitk

class ReportInfo(ReportInfoUI):
    def __init__(self,report_config,patient_data,scan_data,nodule_info,nodule_img,appearance,diagnosis):
        super(ReportInfo, self).__init__()
        self.report_config = report_config
        self.patient_data = patient_data
        self.scan_data = scan_data
        self.nodule_info = nodule_info
        self.nodule_img = nodule_img
        self.appearance = appearance
        self.diagnosis = diagnosis

        self.addButton.clicked.connect(self.addList)
        self.changeButton.clicked.connect(self.changeList)
        self.deleteButton.clicked.connect(self.deleteList)
        self.listWidget.itemDoubleClicked.connect(self.changeList)

        self.init_data()

    def init_data(self):
        self.titleEdit.setText(self.report_config['title'])
        self.subtitleEdit.setText(self.report_config['subtitle'])
        self.dateTimeEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.appearancePlainTextEdit.setPlainText(self.appearance)
        self.diagnosisPlainTextEdit.setPlainText(self.diagnosis)

        if "性别" in self.report_config['info']:
           self.report_config['info']['性别']= "男性" if self.patient_data["gender"] == False else "女性"
        if "年龄" in self.report_config['info']:
            self.report_config['info']['年龄'] = str(self.patient_data["age"])
        if "姓名" in self.report_config['info']:
            self.report_config['info']['姓名'] = self.patient_data["name"]
        if "检查时间" in self.report_config['info']:
            self.report_config['info']['检查时间'] = self.scan_data["time"]

        for key, value in self.report_config['info'].items():
            self.listWidget.addItem(key+":"+value)


        if self.report_config['showInfo'] == False:
            self.patientInfoBox.setChecked(False)
        if self.report_config['showTable'] == False:
            self.noduleTableBox.setChecked(False)
        if self.report_config['showImg'] == False:
            self.noduleImgBox.setChecked(False)
        if self.report_config['showAppearance'] == False:
            self.appearanceBox.setChecked(False)
        if self.report_config['showDiagnosis'] == False:
            self.diagnosisBox.setChecked(False)
        if self.report_config['showFooter'] == False:
            self.footerBox.setChecked(False)


    def addList(self):
        # QInputDialog
        text, ok = QtWidgets.QInputDialog.getText(self, '添加', '请输入添加的信息')
        if ok:
            self.listWidget.addItem(text)

    def changeList(self):
        if self.listWidget.currentItem() is None:
            return None
        text, ok = QtWidgets.QInputDialog.getText(self, '修改', '请输入修改的信息',text=self.listWidget.currentItem().text())
        if ok:
            self.listWidget.currentItem().setText(text)

    def deleteList(self):
        if self.listWidget.currentItem() is None:
            return None
        #询问是否删除
        reply = QtWidgets.QMessageBox.question(self, '删除', '是否删除？', QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.listWidget.takeItem(self.listWidget.currentRow())


    def report(self):

        fname, _filter = QFileDialog.getSaveFileName(self, 'save file', '~/{}'.format(self.patient_data["name"]), "PDF (*.pdf)")
        output_config = {}
        output_config['title'] = self.titleEdit.text()
        output_config['subtitle'] = self.subtitleEdit.text()
        output_config['showInfo'] = self.patientInfoBox.isChecked()
        output_config['showTable'] = self.noduleTableBox.isChecked()
        output_config['showImg'] = self.noduleImgBox.isChecked()
        output_config['showAppearance'] = self.appearanceBox.isChecked()
        output_config['showDiagnosis'] = self.diagnosisBox.isChecked()
        output_config['showFooter'] = self.footerBox.isChecked()







    def get_user_info_pre(self):
        if self.patient_id is None:
            return None
        url = urlConstants.PATIENT_URL + "?id=" + str(self.patient_id)
        self.request_thread = RequestThread("get", url)
        self.request_thread.finishSignal.connect(self.get_user_info_post)
        self.request_thread.start()
    def get_user_info_post(self,response):
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
               self.nameEdit.setText(res['data']['name'])
               if res['data']['gender'] == True:
                   self.FemaleButton.setChecked(True)

               else:
                   self.MaleButton.setChecked(True)
               self.birthday = res['data']['birthday']
               self.change_age()
            else:
                if "errorMsg" in res:
                    QtWidgets.QMessageBox.information(self, "获取", res['errorMsg'])
        else:

            QtWidgets.QMessageBox.information(self, "获取", "获取失败;状态码：" + str(response.status_code))



    def change_age(self):
        '''
        根据生日计算年龄，self.birthday="1999-01-01"

        '''

        if self.birthday is None:
            return
        year,month,day = self.birthday.split("-")
        year = int(year)
        month = int(month)
        day = int(day)
        now = self.dateTimeEdit.dateTime()
        now = now.toString("yyyy-MM-dd")
        now_year,now_month,now_day = now.split("-")
        now_year,now_month, now_day = int(now_year),int(now_month),int(now_day)
        age = now_year - year
        if now_month < month:
            age -= 1
        elif now_month == month:
            if now_day < day:
                age -= 1
        self.ageEdit.setText(str(age))





    def add_from_dicom(self):
        file_path = QFileDialog.getExistingDirectory(self, 'open file', '~/Desktop')
        self.filePathEdit.setText(file_path)

    def check_and_change_color(self,edit,func):


        if  func(edit.text()) == False:
            edit.setStyleSheet(StyleRegisterLineEditError)
            return False
        else:
            edit.setStyleSheet(StyleRegisterLineEditOk)
            return True

    def upload(self):
        result = True
        and_text = ";"
        #为了保障每个未填写的输入框都能被检测到，所以这里用and连接

        result =  self.check_and_change_color(self.nameEdit,FormValidator.validate_not_empty) and result
        result =  self.check_and_change_color(self.ageEdit,FormValidator.validate_is_age) and result
        dicom_dir = self.filePathEdit.text()
        if os.path.isdir(dicom_dir) == False:
            result = False
            and_text += "请填写正确的dicom文件夹路径"
        if result == False:
            QtWidgets.QMessageBox.information(self, "提示", "请填写完整信息"+and_text)
            return

        self.loadingDialog = LoadingDialog(self, "读取文件中...")
        self.loadingDialog.show()
        self.loadThread = LoadDicomThread(dicom_dir)
        self.loadThread.finishSignal.connect(self.load_dicom_post)
        self.loadThread.start()




    def load_dicom_post(self,type, data):
        if type == False:
            self.loadingDialog.close()
            self.loadingDialog = None
            QtWidgets.QMessageBox.information(self, "提示", "读取DICOM文件失败！请确定DICOM文件存在")
            return
        self.loadingDialog.label.setText("上传中...")
        request_dict = {
            "patientId": self.patient_id,
            "time": self.dateTimeEdit.dateTime().toString("yyyy-MM-dd hh:mm:ss"),
            "age": self.ageEdit.text(),
        }

        url = urlConstants.SCAN_URL

        self.request_thread = RequestThread("post", url, files={'file': data}, data=request_dict)
        self.request_thread.finishSignal.connect(self.upload_post)
        self.request_thread.start()

    def upload_post(self,response):
        self.loadingDialog.close()
        self.loadingDialog = None
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
                QtWidgets.QMessageBox.information(self, "提示", "提交成功")
                self.finishSignal.emit(1)
                self.close()
            else:
                if "errorMsg" in res:
                    QtWidgets.QMessageBox.information(self, "提示", res['errorMsg'])
        else:

            QtWidgets.QMessageBox.information(self, "提示", "提交失败;状态码：" + str(response.status_code))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = AddScanDialog(1)
    ui.show()
    sys.exit(app.exec_())
