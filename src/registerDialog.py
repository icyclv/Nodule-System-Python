# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Administrator\Downloads\Login_PyQt5-master\register_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog

from ui.registerDialogUI import Register_Dialog_UI
from utils.MyThread import RequestThread
from css.Login_css import StyleRegisterLineEditError, StyleRegisterLineEditOk
from utils.SingletionUtils import urlConstants
from utils.Validitor import FormValidator


class Register_Dialog(Register_Dialog_UI):

    def __init__(self, parent=None):
        super(Register_Dialog, self).__init__(parent)

        self.registerButton.clicked.connect(self.register)


    def check_and_change_color(self,edit,func):
        # 去除空格
        edit.setText(edit.text().replace(" ", ""))
        if  func(edit.text()) == False:
            edit.setStyleSheet(StyleRegisterLineEditError)
            return False
        else:
            edit.setStyleSheet(StyleRegisterLineEditOk)
            return True

    def register(self):
        result = True
        and_text = ";"
        #为了保障每个未填写的输入框都能被检测到，所以这里用and连接
        if self.check_and_change_color(self.phoneEdit, FormValidator.validate_phone_number) is False:
                and_text += "电话号码格式错误;"
                result = False
        if self.check_and_change_color(self.mailEdit, FormValidator.validate_email) is False:
                and_text += "邮箱格式错误"
                result = False
        result = self.check_and_change_color(self.usernameEdit,FormValidator.validate_not_empty) and result
        result = self.check_and_change_color(self.passwordEidt,FormValidator.validate_not_empty) and result
        result = self.check_and_change_color(self.departmentEdit,FormValidator.validate_not_empty) and result
        result =  self.check_and_change_color(self.nameEdit,FormValidator.validate_not_empty) and result
        result =  self.check_and_change_color(self.positionEdit,FormValidator.validate_not_empty) and result
        if result == False:
            QtWidgets.QMessageBox.information(self, "提示", "请填写完整信息"+and_text)
            return

        request_dict = {
                "userName": self.usernameEdit.text(),
                "password": self.passwordEidt.text(),
                "email": self.mailEdit.text(),
                "phone": self.phoneEdit.text(),
                "name": self.nameEdit.text(),
                "gender":True if self.FemaleButton.isChecked() else False,
                "birthday": self.birthdayEdit.date().toString("yyyy-MM-dd"),
                "department": self.departmentEdit.text(),
                "position": self.positionEdit.text()
        }
        url =  urlConstants.REGISTER_URL

        self.request_thread = RequestThread("post", url,json=request_dict)
        self.request_thread.finishSignal.connect(self.register_end)
        self.request_thread.start()


    def register_end(self, response):
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
                QtWidgets.QMessageBox.information(self, "提示", "注册成功")
                self.close()
            else:
                if "errorMsg" in res:
                    QtWidgets.QMessageBox.information(self, "提示", res['errorMsg'])
        else:
            QtWidgets.QMessageBox.information(self, "提示", "注册失败;状态码："+str(response.status_code))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Register_Dialog()
    ui.show()
    sys.exit(app.exec_())
