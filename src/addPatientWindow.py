# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Administrator\Downloads\Login_PyQt5-master\register_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import os.path

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QDialog, QFileDialog

from ui.addPatientWindowUI import AddPatientWindowUI
from ui.registerDialogUI import Register_Dialog_UI
from utils.MyThread import RequestThread
from css.Login_css import StyleRegisterLineEditError, StyleRegisterLineEditOk
from utils.SingletionUtils import urlConstants
from utils.Validitor import FormValidator
import SimpleITK as sitk

class AddPatientWindow(AddPatientWindowUI):
    finishSignal = pyqtSignal(int)
    def __init__(self,patient_id=None):
        super(AddPatientWindow, self).__init__()
        self.patient_id = patient_id
        if self.patient_id is not None:
            self.setWindowTitle("修改患者信息")
            self.registerButton.setText("修改")
            self.get_patient_info_pre()
        self.registerButton.clicked.connect(self.register)
        self.DICOMaction.triggered.connect(self.add_from_dicom)

    def get_patient_info_pre(self):
        if self.patient_id is None:
            return None
        url = urlConstants.PATIENT_URL + "?id=" + str(self.patient_id)
        self.request_thread = RequestThread("get", url)
        self.request_thread.finishSignal.connect(self.get_patient_info_post)
        self.request_thread.start()

    def get_patient_info_post(self,response):
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
                self.nameEdit.setText(res['data']['name'])
                self.birthdayEdit.setDate(QtCore.QDate.fromString(res['data']['birthday'], "yyyy-MM-dd"))
                self.phoneEdit.setText(res['data']['phone'])
                self.addressEdit.setText(res['data']['address'])
                self.backupEdit.setPlainText(res['data']['backup'])
                if res["data"]["gender"] == True:
                    self.FemaleButton.setChecked(True)
                else:
                    self.MaleButton.setChecked(True)



            else:
                if "errorMsg" in res:
                    QtWidgets.QMessageBox.information(self, "提示", res['errorMsg'])
        else:

            QtWidgets.QMessageBox.information(self, "提示", "载入失败;状态码：" + str(response.status_code))

    def add_from_dicom(self):
        file_path = QFileDialog.getExistingDirectory(self, 'open file', '~/Desktop')
        if file_path == "":
            return

        try:
            reader = sitk.ImageSeriesReader()
            dcm_series = reader.GetGDCMSeriesFileNames(file_path)
            reader.SetFileNames(dcm_series)
            reader.MetaDataDictionaryArrayUpdateOn()
            reader.LoadPrivateTagsOn()
            reader.Execute()
            keys = reader.GetMetaDataKeys(1)
            keys = set(keys)
            if "0010|0010" in keys:
                name=reader.GetMetaData(1, "0010|0010").strip()
                if name != "":
                    self.nameEdit.setText(name)
            if "0010|0030" in keys:
                birthday=reader.GetMetaData(1, "0010|0030").strip()
                if birthday != "":
                    self.birthdayEdit.setDate(QtCore.QDate.fromString(birthday, "yyyyMMdd"))
            if "0010|0040" in keys:
                gender=reader.GetMetaData(1, "0010|0040").strip()
                if gender != "":
                    self.MaleButton.setChecked(True) if gender == "M" else self.FemaleButton.setChecked(True)


        except:
            QtWidgets.QMessageBox.information(self, "提示", "读取Dicom文件失败")
            return

    def check_and_change_color(self,edit,func):


        if  func(edit.text()) == False:
            edit.setStyleSheet(StyleRegisterLineEditError)
            return False
        else:
            edit.setStyleSheet(StyleRegisterLineEditOk)
            return True

    def register(self):
        result = True
        and_text = ";"
        #为了保障每个未填写的输入框都能被检测到，所以这里用and连接
        if self.check_and_change_color(self.phoneEdit, FormValidator.validate_phone_number) is False:
                and_text += "电话号码格式错误;"
                result = False
        result =  self.check_and_change_color(self.nameEdit,FormValidator.validate_not_empty) and result
        result =  self.check_and_change_color(self.addressEdit,FormValidator.validate_not_empty) and result
        if result == False:
            QtWidgets.QMessageBox.information(self, "提示", "请填写完整信息"+and_text)
            return

        request_dict = {
                "name": self.nameEdit.text(),
                "gender":True if self.FemaleButton.isChecked() else False,
                "birthday": self.birthdayEdit.date().toString("yyyy-MM-dd"),
                "phone": self.phoneEdit.text(),
                "address": self.addressEdit.text(),
                "backup": self.backupEdit.toPlainText()
        }
        url = urlConstants.PATIENT_URL
        if self.patient_id is  None:

            self.request_thread = RequestThread("post", url,json=request_dict)
            self.request_thread.finishSignal.connect(self.register_end)
            self.request_thread.start()
        else:
            request_dict["id"] = self.patient_id
            self.request_thread = RequestThread("put", url, json=request_dict)
            self.request_thread.finishSignal.connect(self.register_end)
            self.request_thread.start()


    def register_end(self, response):
        if response.status_code == 200:
            res = response.content.decode("utf-8")
            res = json.loads(res)
            if res['success'] == True:
                QtWidgets.QMessageBox.information(self, "提示", "提交成功")
                self.finishSignal.emit(1)
                if self.patient_id is not None:
                    self.close()
            else:
                if "errorMsg" in res:
                    QtWidgets.QMessageBox.information(self, "提示", res['errorMsg'])
        else:

            QtWidgets.QMessageBox.information(self, "提示", "提交失败;状态码："+str(response.status_code))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = AddPatientWindow()
    ui.show()
    sys.exit(app.exec_())
